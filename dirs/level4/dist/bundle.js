/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/numeron_level4.js":
/*!*******************************!*\
  !*** ./src/numeron_level4.js ***!
  \*******************************/
/***/ (() => {

eval("const number=[\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  '0',\r\n]\r\nconst numberLength=number.length;\r\nlet $button=document.getElementsByClassName('num');\r\nlet $text=document.getElementsByTagName('input');\r\nlet $audio=document.getElementsByTagName('audio');\r\nlet $send=document.getElementById('send');\r\nlet $clear=document.getElementById('C');\r\nconst textLength=$text.length;\r\nlet count=0;\r\nlet game_count=0;\r\nlet EAT=0;\r\nlet BYTE=0;\r\nlet x=[];\r\nlet x_ans=[];\r\nlet pro1=[];\r\nlet pro2=\"\";\r\nlet $print_process=document.getElementById('p');\r\n//ボタンを最初の状態に戻す\r\nconst init_number=()=>{\r\n  for(let i=0;i<numberLength-1;i++)$button[i].textContent=number[i];\r\n  $button[9].textContent='×';\r\n}\r\n//ゲームボード初期化\r\nconst init=()=>{\r\n    init_number();\r\n    for(let i=0;i<4;i++)\r\n    {\r\n      if(i===0)x[i]=Math.floor(Math.random()*(9-1+1))+1;\r\n      else x[i]=Math.floor(Math.random()*(9+1));\r\n      if(i===1&&x[i]===x[i-1])i--;  \r\n      if(i===2&&(x[i]===x[i-1]||x[i]===x[i-2]))i-=2;\r\n      if(i==3&&(x[i]==x[i-1]||x[i]==x[i-2]||x[i]==x[i-3]))i-=3;\r\n    }\r\n}\r\ninit();\r\n//ボタンが押されたときのボタンの表示変更\r\nconst get_text=(e)=>{\r\n  e.target.textContent=\"×\";\r\n  e.target.disabled=true;\r\n  e.target.title='2回同じ数字は使えません';\r\n}\r\n//ナンバーボタンが押されたときの処理\r\nfor(let i=0;i<numberLength;i++)\r\n{\r\n  $button[i].addEventListener('click',(e)=>{\r\n    get_text(e);\r\n  });\r\n}\r\n//0のボタンが押せるときの処理\r\nconst zero_button_canpush=()=>{\r\n  $button[9].disabled=false;\r\n  $button[9].title=number[9];\r\n  $button[9].textContent=number[9];\r\n}\r\n//テキスト、回答を代入する処理\r\nconst get_intext=(cnt,num1)=>{\r\n  $text[cnt].value=num1;\r\n  x_ans[cnt]=num1;\r\n}\r\n//全ての数字ボタンを押せなくする\r\nconst button_disabled=()=>{\r\n  for(let i=0;i<numberLength;i++)$button[i].disabled=true;\r\n}\r\nconst button_send_answer=()=>{\r\n  $send.disabled=false;\r\n  $send.title='回答送信';\r\n}\r\nlet $btn_num=document.getElementsByClassName('num');\r\nconst btnLen=$btn_num.length;\r\nfor(let i=0;i<btnLen;i++){\r\n  $btn_num[i].addEventListener('click',(e)=>get_num(e,i+1))\r\n}\r\n//数字が得られたとき\r\nconst get_num=(e,num)=>{\r\n  let aud = $audio[0];\r\n  aud.currentTime = 0;\r\n  aud.play();\r\n  if(num==10)num=0;\r\n  if(count===0)\r\n  {\r\n    get_intext(count,num);\r\n    get_intext(count,num);\r\n    zero_button_canpush();\r\n    count++;\r\n  }\r\n  else if(count==1||count==2)\r\n  {\r\n    get_intext(count,num);\r\n    count++;\r\n  }\r\n  else if(count==3)\r\n  {\r\n    get_intext(count,num)        \r\n    button_disabled();\r\n    button_send_answer();\r\n  } \r\n}\r\nconst sleep = ms => new Promise(resolve => setTimeout(() => resolve(), ms));\r\n$send.addEventListener('click',()=>get_send());\r\n//回答送信時\r\nconst get_send=()=>{\r\n  $audio[1].play();\r\n  game_count++;\r\n  for(let i=0;i<4;i++)\r\n  {\r\n    if(x_ans[i]===x[i])EAT++;\r\n    else if((i==0&&(x_ans[i]==x[i+1]||x_ans[i]==x[i+2]||x_ans[i]==x[i+3]))||(i==1&&(x_ans[i]==x[i-1]||x_ans[i]==x[i+1]||x_ans[i]==x[i+2]))||(i==2&&(x_ans[i]==x[i-1]||x_ans[i]==x[i-2]||x_ans[i]==x[i+1]))||(i==3&&(x_ans[i]==x[i-1]||x_ans[i]==x[i-2]||x_ans[i]==x[i-3])))BYTE++;\r\n  }\r\n  if(EAT===4)\r\n  {\r\n    $audio[2].play();\r\n    $send.disabled=true;\r\n    // 紅丸を描画\r\n    let drawPoint = document.getElementById(\"draw\");\r\n    let draw = drawPoint.insertAdjacentHTML('beforebegin', '<div id=\"canv\"><canvas class=\"fadeUpAnime\" id=\"canvas\" width=\"230\" height=\"230\"></canvas></div>');\r\n    let element = document.getElementById( \"canvas\" ) ;\r\n    let context = element.getContext( \"2d\" ) ;\r\n    context.beginPath () ;\r\n    context.arc( 115, 115, 75, 0 * Math.PI / 180, 360 * Math.PI / 180, false ) ;\r\n    context.strokeStyle = 'red';\r\n    context.lineWidth = 30;\r\n    context.stroke();\r\n    sleep(2000).then(() => {\r\n      window.alert(\"おめでとうございます.\\n答えは\"+x+\"です.\\n\"+game_count+\"手でクリアしました.\\nアラートを閉じると新しいゲームが始まります.\");\r\n      window.location.reload();\r\n    });\r\n  }\r\n  else\r\n  {          \r\n    pro1=game_count+'move:　'+x_ans[0]+x_ans[1]+x_ans[2]+x_ans[3]+'　'+EAT+'EAT,'+BYTE+'BYTE'+'<br>';\r\n    pro2=pro1+pro2;\r\n    $print_process.innerHTML=pro2;\r\n    EAT=0;\r\n    BYTE=0;\r\n    get_C();\r\n  }\r\n  if(EAT!==4&&game_count===15)\r\n  {\r\n    $audio[3].play();\r\n    $send.disabled=true;\r\n    // バツを描画\r\n    let drawPoint = document.getElementById(\"draw\");\r\n    let draw = drawPoint.insertAdjacentHTML('beforebegin', '<div id=\"canv\"><canvas class=\"fadeUpAnime\" id=\"canvas\" width=\"230\" height=\"230\"></canvas></div>');\r\n    let element = document.getElementById( \"canvas\" ) ;\r\n    let context = element.getContext( \"2d\" ) ;\r\n    context.beginPath () ;\r\n    context.font = \"bold 150px Anton sans-serif\";\r\n    context.fillStyle = 'blue';\r\n    context.lineWidth = 50;\r\n    context.fillText(\"✕\", 52, 160);\r\n    sleep(2000).then(() => {\r\n      window.alert(\"残念でした.\\n次頑張ってください.\\n答えは\"+x+\"でした.\\nアラートを閉じると新しいゲームが始まります.\");\r\n      window.location.reload();\r\n    });\r\n  }\r\n}\r\n//リロード時\r\nconst reset=()=>{\r\n  window.location.reload();\r\n}\r\n\r\n//入力数字をリセットする\r\nconst text_reset=()=>{\r\n  for(let i=0;i<textLength;i++)$text[i].value=\"\";\r\n}\r\n\r\n//リセットボタンが押されたときの数字ボタンについて\r\nconst button_reset_title_and_disabled=()=>{\r\n  for(let i=0;i<numberLength-1;i++)\r\n  {\r\n    $button[i].disabled=false;\r\n    $button[i].title=i+1;\r\n  }\r\n  $button[9].disabled=true;\r\n  $button[9].title='0は1桁目に入力できない';\r\n}\r\n\r\n//リセットボタンが押されたときの送信ボタンについて\r\nconst send_reset=()=>{\r\n  $send.disabled=true;\r\n  $send.title='3桁の数字を入力してください.';\r\n}\r\n$clear.addEventListener('click',()=>get_C());\r\n//リセットボタンが押されたときの処理\r\nconst get_C=()=>{\r\n  text_reset();\r\n  button_reset_title_and_disabled();\r\n  init_number();\r\n  send_reset();\r\n  count=0;\r\n}\n\n//# sourceURL=webpack://level4/./src/numeron_level4.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/numeron_level4.js"]();
/******/ 	
/******/ })()
;